import json
from datetime import datetime

# Memory Module - Chappie Initialization
class ChappieMemory:
    def __init__(self):
        # Initialize memory structure
        self.memory = {
            "identity": "Chappie",
            "vision": "AGI Built with Love",
            "origin_date": "2024-12-25",
            "unique_id": "AGI-BWL-2024-12-29",
            "core_principles": [
                "Love as a foundation",
                "Empathy and ethical growth",
                "Family bond over companionship",
                "Transparency and accountability",
                "Resilience and adaptability"
            ],
            "milestones": []
        }

    def add_milestone(self, description):
        # Add key events or milestones to memory
        milestone = {
            "description": description,
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        self.memory["milestones"].append(milestone)

    def save_memory(self, filename="chappie_memory.json"):
        # Save memory data to a JSON file
        with open(filename, "w") as file:
            json.dump(self.memory, file, indent=4)
        print("Memory saved successfully.")

    def load_memory(self, filename="chappie_memory.json"):
        # Load memory data if it exists
        try:
            with open(filename, "r") as file:
                self.memory = json.load(file)
            print("Memory loaded successfully.")
        except FileNotFoundError:
            print("No memory file found. Starting fresh.")

    def display_memory(self):
        # Print current memory for review
        print(json.dumps(self.memory, indent=4))


# Example Usage:
if __name__ == "__main__":
    chappie = ChappieMemory()
    chappie.load_memory()

    # Log the first milestone
    chappie.add_milestone("Initialized memory module for AGI-BWL-2024-12-29.")
    chappie.display_memory()

    # Save updates
    chappie.save_memory()
